'use client';

import React, { useEffect, useRef } from 'react';
import { createRoot } from 'react-dom/client';
import DynamicIcon from './icons/DynamicIcon';

/**
 * This component processes icon elements generated by Claude
 * and replaces them with actual Lucide icons
 */
const LucideIconProcessor: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Wait for the component to mount
    if (!containerRef.current) return;

    // Find all elements with data-icon attribute
    const iconElements = containerRef.current.querySelectorAll('[data-icon]');

    // Process each icon element
    iconElements.forEach((element) => {
      if (!(element instanceof HTMLElement)) return;

      // Extract icon data from attributes
      const iconName = element.getAttribute('data-icon');
      const size = element.getAttribute('data-size') || '24';
      const className = element.getAttribute('data-class') || '';
      const strokeWidth = element.getAttribute('data-stroke-width') || '2';

      if (!iconName) return;

      // Create a new Lucide icon element
      const iconElement = document.createElement('span');
      iconElement.className = 'lucide-icon-container';
      iconElement.setAttribute('data-lucide-processed', 'true');
      
      // Render the DynamicIcon into the span using createRoot
      const iconContainer = document.createElement('div');
      const root = createRoot(iconContainer);
      root.render(
        <DynamicIcon 
          name={iconName}
          size={parseInt(size)} 
          className={className}
          strokeWidth={parseFloat(strokeWidth)}
        />
      );

      // Replace the original element with the new icon
      if (iconContainer.firstChild) {
        iconElement.appendChild(iconContainer.firstChild);
        element.parentNode?.replaceChild(iconElement, element);
      }
    });
  }, [children]); // Re-run when children change

  return (
    <div ref={containerRef}>
      {children}
    </div>
  );
};

export default LucideIconProcessor; 