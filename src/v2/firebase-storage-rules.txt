rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // ============================================================================
    // V2 CAMPAIGN BUILD SYSTEM - USER-FIRST STORAGE RULES
    // ============================================================================
    
    // Global read access for public assets
    match /{allPaths=**} {
      allow read: if true;
    }
    
    // ============================================================================
    // USER-SCOPED RESOURCES - Everything under /v2/{userId}/
    // ============================================================================
    
    // All user content - simple and secure
    match /v2/{userId}/{document=**} {
      // Users can only access their own data
      allow write: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Specific size limits for different resource types
    match /v2/{userId}/brands/{brandId}/logos/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidLogoFile(request.resource)
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    match /v2/{userId}/brands/{brandId}/assets/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 2 * 1024 * 1024; // 2MB limit
    }
    
    match /v2/{userId}/designs/{designId}/generated/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidDesignFile(request.resource)
        && request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    match /v2/{userId}/designs/{designId}/uploaded/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidDesignFile(request.resource)
        && request.resource.size < 15 * 1024 * 1024; // 15MB limit
    }
    
    match /v2/{userId}/designs/{designId}/thumbnails/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 1 * 1024 * 1024; // 1MB limit
    }
    
    match /v2/{userId}/campaigns/{campaignId}/final/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 50 * 1024 * 1024; // 50MB for print files
    }
    
    match /v2/{userId}/campaigns/{campaignId}/working/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 25 * 1024 * 1024; // 25MB limit
    }
    
    match /v2/{userId}/campaigns/{campaignId}/previews/{fileName} {
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // ============================================================================
    // NON-USER RESOURCES (No change needed)
    // ============================================================================
    
    // Admin-only assets
    match /v2/admin/{allPaths=**} {
      allow write: if request.auth != null && isAdmin();
      allow delete: if request.auth != null && isAdmin();
    }
    
    // System templates and defaults
    match /v2/system/{allPaths=**} {
      allow write: if request.auth != null && isAdmin();
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Temporary uploads (session-based, not user-specific)
    match /v2/temp/{sessionId}/{fileName} {
      allow write: if request.auth != null
        && request.resource.size < 20 * 1024 * 1024; // 20MB temp limit
      allow delete: if request.auth != null;
    }
    
    // Processing queue (job-based, not user-specific)
    match /v2/processing/{jobId}/{fileName} {
      allow write: if request.auth != null
        && request.resource.size < 30 * 1024 * 1024; // 30MB processing limit
      allow delete: if request.auth != null;
    }
    
    // ============================================================================
    // LEGACY COMPATIBILITY (V1)
    // ============================================================================
    
    // Keep existing V1 rules for backward compatibility
    match /logos/{allPaths=**} {
      allow write: if request.auth != null;
    }
    
    match /campaignImages/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /finalDesigns/{userId}/{allPaths=**} {
      allow write: if request.auth != null;
    }
    
    match /users/{userId}/{allPaths=**} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /temp/{sessionId}/{allPaths=**} {
      allow write: if request.auth != null;
    }
    
    match /businesses/{businessId}/{allPaths=**} {
      allow write: if request.auth != null;
    }
    
    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    // Validate logo file types and properties
    function isValidLogoFile(resource) {
      return resource.contentType.matches('image/(svg\\+xml|png|jpeg)') ||
             resource.contentType == 'image/svg+xml' ||
             resource.contentType == 'image/png' ||
             resource.contentType == 'image/jpeg';
    }
    
    // Validate design file types
    function isValidDesignFile(resource) {
      return resource.contentType.matches('image/(png|jpeg|webp)') ||
             resource.contentType == 'application/pdf' ||
             resource.contentType == 'image/png' ||
             resource.contentType == 'image/jpeg' ||
             resource.contentType == 'image/webp';
    }
    
    // Check if user is admin (simplified for single user)
    function isAdmin() {
      // For single user environment, always true if authenticated
      // In multi-user, this would check custom claims or Firestore roles
      return request.auth != null;
    }
  }
} 