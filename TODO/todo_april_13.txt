# TODO: Dashboard Page - April 13

## Goal
Create a dashboard page for users to land on after submitting design requests via the AIHumanWizard. This page will allow users to view their leads, track the status of their postcard designs, see past campaigns, manage brand profiles, and manage account settings.

## File Structure

[x] Main Page: `app/dashboard/page.tsx`
[x] Components Directory: `src/components/dashboard/`

## Dashboard Sections & Components

1.  **Dashboard Overview (`DashboardSummary.tsx`)**
    [ ] Welcome message. (UI Placeholder added)
    [ ] Quick stats (active campaigns, leads selected, postcards sent - requires Stannp integration). (UI Placeholder added, needs data fetch)
    [ ] Recent activity feed. (UI Placeholder added, needs data fetch)
    [ ] Quick action buttons ("Start New Campaign", "View Campaigns"). (UI Placeholders added, needs linking)

2.  **Brand Profile Management (`BrandProfileManager.tsx`)**
    [x] List user's existing brand profiles (fetch from `users/{userId}/brandingData`). (Listener implemented)
    [x] Allow creating new brand profiles. (Add button, modal, form logic implemented)
    [x] Allow editing existing profiles (name, colors, logo, notes). (Edit button, modal, form logic implemented - needs `updateBrandData` service function verification)
    [x] Allow deleting brand profiles. (Delete button logic implemented - needs `deleteBrandData` service function verification)

3.  **Data Management / Leads (`LeadSummary.tsx` / `CampaignLeadViewer.tsx`)**
    [ ] Display summary of selected/unselected leads across campaigns or for a specific campaign.
    [x] Fetch lead data from Firestore (likely `campaignLeads` collection or subcollection) - Implemented in viewer.
    [x] Implement view to see leads for a specific campaign (`CampaignLeadViewer.tsx` created, modal integration done).
    [x] Allow selecting/deselecting leads within the campaign view. (Implemented with batch update).
    [ ] (Future) Track lead status (sent, delivered, responded).

4.  **Postcard Designs (`PostcardDesigns.tsx` or `DesignGallery.tsx`)**
    [x] Fetch user's `CampaignDesignData` documents from Firestore (or potentially `design_requests` depending on final structure).
    [x] Implement real-time Firestore listeners to track status field changes ('processing_ai', 'review_ready', 'completed', 'ai_failed') and generated results (aiPrompt, aiSummary, finalDesignUrl or finalDesigns). Listener implemented. Type definition updated with new statuses & leadCount.
    [x] Display loading indicators for designs with 'processing_ai' status. (Visual spinner implemented).
    [x] Show final generated designs (thumbnails, view larger option) when 'completed'. Basic display setup with modal for expansion implemented.
    [x] Display associated lead count (`leadCount`). UI implemented. Requires backend logic to populate field.
    [x] Display status of `design_requests` if using that collection for AI+Human flow. (Placeholder added).
    [x] Payment Trigger: Add "Proceed to Payment & Send" button for completed designs. (UI implemented). (**Note:** On first payment, create Stripe customer ID and associate with user).

5.  **Campaigns / Sent History (`CampaignHistory.tsx`)**
    [x] Display list of campaigns (fetched from Firestore `campaigns` collection - using `userId`).
    [x] Show key campaign details (Name, Status, Dates, Lead Counts). (Basic UI implemented).
    [x] Link campaigns to their respective leads and designs. (Modal viewer for leads implemented).
    [ ] Track actual sent postcards. (Deferred - requires Stripe/Stannp integration, added to ALLTIME list).
    [ ] Display history of sent campaigns with status and dates. (Basic status shown, mailing status deferred).
    **Note:** Corrected `leadCount`/`selectedLeadCount` update logic in `campaignService.ts` to use `increment()`.

6.  **Settings (`UserSettings.tsx`)**
    [x] User profile management (Name, Email). (UI Placeholder added, needs `updateUserProfileData` service fn integration)
    [x] Password change functionality. (Implemented using client-side SDK, needs re-auth flow for `requires-recent-login` error)
    [ ] (Future) Billing information / Stripe integration management.
    [ ] (Future) Notification preferences.

## Layout & Navigation
[x] The main `app/dashboard/page.tsx` will orchestrate the layout.
[x] Implement navigation between sections (Tabs or Sidebar). Basic tabs implemented & styled.
[ ] Ensure all UI components adhere to the styles defined in `brandguidelines.txt`.

## Data Flow
[ ] `page.tsx` might handle initial data fetching (e.g., list of businesses/brands) or delegate to child components.
[x] Real-time listeners in `PostcardDesigns.tsx` are essential for design status updates. Listener implemented.
[ ] Evaluate need for shared state management (Zustand/Context) vs. component-level fetching, especially for the active brand/business context.

## Next Steps
[x] Create the basic `app/dashboard/page.tsx` structure.
[x] Create the `src/components/dashboard/` directory.
[x] Start building the layout/navigation (e.g., using Tabs). Basic tabs implemented & styled.
[x] Begin implementing the postcard design viewing component (`PostcardDesigns.tsx`). Basic structure, listener, thumbnail display/modal, lead count display, and payment button UI implemented.
[x] Implement Brand Profile viewing, adding, and editing UI/logic in `BrandProfileManager.tsx`.
[x] Implement Brand Profile deletion logic in `BrandProfileManager.tsx`.
[x] Refactor `campaignService.ts` and `CampaignHistory.tsx` to fetch campaigns by `userId`.
[x] Create `CampaignLeadViewer.tsx` component.
[x] Integrate `CampaignLeadViewer` into `CampaignHistory` via modal.
[x] Implement lead selection/deselection logic with batch update in `CampaignLeadViewer.tsx`.
[x] Update `CampaignDesignData` type to include `campaignId`.
[x] Modify `AIHumanWizard.tsx` to accept and save `campaignId`.
[x] Create `DashboardSummary.tsx` component with placeholder UI.
[x] Create `UserSettings.tsx` component with placeholder UI.
[x] Implement client-side password change logic in `UserSettings.tsx`.