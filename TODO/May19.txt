# New Campaign Build & Console Implementation Plan (v4) - UPDATED Dec 2024

## CRITICAL BUG TO FIX FIRST: Campaign Creation Flow ✅ SOLUTION IMPLEMENTED

### Issue: PlacesLeadsCollection expects a campaignId that doesn't exist
- [x] **Fix the circular dependency**: PlacesLeadsCollection needs currentCampaign.id but campaign is only created after selecting leads
- [x] **Option 1 IMPLEMENTED**: Create a draft campaign when user clicks "show me my leads"
  - [x] Added Firebase Anonymous Authentication
  - [x] Created `createDraftCampaign` function in campaignService.ts
  - [x] Updated AuthContext to automatically sign in anonymous users
  - [x] Updated MarketingResults to create draft campaign before showing leads
  - [x] Created Firestore security rules documentation

### Next Steps to Complete the Fix:
- [x] Update Firestore security rules in Firebase Console (see firestore.rules)
- [ ] Test the complete flow with anonymous users
- [x] Update PlacesLeadsCollection to save leads to the campaign (implemented in handleGoogleSearch)
- [ ] Implement proper campaign finalization when user confirms selection

## Anonymous User Conversion Strategy ✅ IMPLEMENTED

### Conversion Points:
1. **Soft Ask (After Seeing Leads)** - Shows 3 seconds after leads load
   - [x] Created AnonymousUserPrompt component with 3 stages
   - [x] Integrated into PlacesLeadsCollection with auto-show timer
   - Benefits shown: Save campaigns, access from any device, get updates

2. **Medium Ask (Before Campaign Finalization)** - When clicking "Start Campaign"
   - [x] Shows modal prompting account creation
   - [x] Option to continue as guest with email capture
   - [x] EmailCaptureModal for collecting contact info

3. **Hard Requirement (Before Payment)** - Must create account
   - [ ] Implement in payment flow
   - [ ] No option to skip - required for Stripe

### Data Collection for Anonymous Users:
- [x] Business info saved to draft campaign
- [x] Contact info (email/phone) saved to campaign and session
- [ ] Set up Cloud Function to send campaign links via email
- [ ] Create abandoned cart email automation

## Phase 1: Build Flow & Initial Handoff (Focus on "One-Off" Mode First)

### 1. Establish Feature-First Directory Structure & Routing
- [x] **Routing (Critical):** Structure page routes within the project-level `/app` directory using Route Groups for organization.
    - [ ] `src/app/(campaignBuild)/build/[campaignId]/page.tsx` (Build/Design Page - will be shared by "one-off" and "autopilot" modes, detecting mode from Firestore data)
    - [ ] `src/app/(console)/console/page.tsx` (Customer Console)
    - [x] `src/app/(admin)/admin/page.tsx` (Staff-only Admin Console - EXISTS but needs implementation)
- [x] **Feature Co-location:** Organize UI components, hooks, and non-page logic within `src/features/...` directories.
    - [x] Components organized in `src/components/`, `src/features/`
    - [x] Services in `src/services/`
    - [x] Store in `src/store/`
- [x] Create or augment `src/services/campaignService.ts` for client-side service calls (EXISTS).
- [x] Create or augment `src/store/useCampaignFlowStore.ts` (using marketingStore.ts instead)
- [x] Create/Augment `src/types/campaign.ts` to consolidate types (types distributed across files)
- [ ] Create `src/types/firestoreConverters.ts` for typed Firestore data converters.
- [ ] Create reusable utility `src/lib/chunkArray.ts` for batch processing. (NEW)

### 2. Refactor "Start Campaign" in `PlacesLeadsCollection.tsx` (for "One-Off" flow)
- [x] Locate the `handleStartCampaign` function (exists as `handleConfirmSelection`).
- [ ] **BLOCKED BY CAMPAIGN FLOW BUG** - Need to fix campaign creation before this works properly
- [x] Client generates a unique campaign ID (`cid`) for idempotency (using `ulid()`). 
- [ ] Retrieve `strategyId` from `useMarketingStore.getState()` (currently passing null).
- [x] Retrieve *all found/displayed leads* (implemented).
- [x] Retrieve the `Set<string>` of *selected place_ids* (implemented).
- [x] Wrap the call to the Cloud Function in a `try/catch` block (implemented).
- [x] Invoke the Callable Cloud Function `createCampaignWithLeads` (implemented in campaignService.ts).

### 3. Develop Callable Cloud Function: `createCampaignWithLeads`
- [x] **Function exists** at `functions/src/campaign/createCampaignWithLeads.ts`
- [ ] **Need to verify implementation matches spec**:
    - [ ] Validate `allFoundLeadsData` length/size
    - [ ] Authentication check using `context.auth`
    - [ ] Idempotency check
    - [ ] Batch write limits
    - [ ] Proper error handling
- [x] Function is exported in `functions/src/index.ts`

### 4. Build Page Placeholder (`src/app/(campaignBuild)/build/[campaignId]/page.tsx`)
- [ ] Basic Next.js dynamic route page component.
- [ ] Will fetch and display data based on `campaignId`, adapting UI for `campaignMode`.
- [ ] *Consider Error Boundary component.*

### 5. State Management for Build & Console (`src/store/marketingStore.ts`)
- [x] State management exists in `marketingStore.ts`
- [x] Has campaign-related state and actions
- [ ] Need to add `campaignMode: CampaignMode`, `autopilotConfig?: AutopilotConfig`

## Phase 2: Customer Console

### Current Dashboard Implementation Status:
- [x] Dashboard exists at `/dashboard` with tabs:
    - [x] Overview (DashboardSummary.tsx) - placeholder UI
    - [x] Brands (BrandProfileManager.tsx) - mostly implemented
    - [x] Designs (PostcardDesigns.tsx) - basic implementation  
    - [x] Campaigns (CampaignHistory.tsx) - basic listing
    - [x] Leads (CampaignLeadViewer.tsx) - exists but not integrated in dashboard
    - [x] Settings (UserSettings.tsx) - basic implementation

### 1. UI Enhancements for Campaign Modes
- [ ] Display "Mode" column (One-off / Autopilot) in CampaignHistory.
- [ ] If `campaignMode === "autopilot"`, show `nextRunAt`, recurrence details.

### 2. Filtering & Sorting (UPDATED Indexes)
- [ ] **Firestore Composite Indexes (Critical/Helpful):**
    - [ ] `campaigns`: `(ownerUid, campaignMode, createdAt)`
    - [ ] `campaigns`: `(ownerUid, status, createdAt)`
    - [ ] `campaigns`: `(ownerUid, createdAt DESC)`
    - [ ] `leads` (collection group): `(businessType, status)`
    - [ ] `campaigns`: `(campaignMode ASC, nextRunAt ASC)` (for Autopilot)

## Phase 3: Autopilot Campaign Implementation (NEW)
- [ ] All autopilot features pending

## Phase 4: Admin Console Implementation
- [x] Admin page exists at `/admin` but needs implementation
- [ ] User Roles & Permissions
- [ ] Firestore Security Rules Patch
- [ ] Admin Console UI implementation

## Phase 5: Remaining Features
- [ ] Postcard Design UI (partial implementation exists in PostcardDesigns.tsx)
- [ ] Cloud Function for AI Image Generation
- [ ] Cloud Function for `quoteAndCreatePaymentIntent` (Stripe)
- [ ] Stripe Elements integration (some UI exists in UserSettings.tsx)
- [ ] Cloud Function for `scheduleCampaign` (Stannp API)
- [ ] Stannp Webhook handler Cloud Function

## Immediate Action Items:
1. **Fix the campaign creation flow bug** - This is blocking the entire lead selection process
2. **Verify Cloud Function implementation** matches the spec
3. **Complete the build page** at `/build/[campaignId]`
4. **Test the complete flow** from home → leads → campaign creation → build

## Notes from Investigation:
- The project uses Next.js 15 with the new params Promise pattern
- Firebase Functions are set up but only createCampaignWithLeads is implemented
- Authentication is handled via Firebase Auth with AuthContext
- Offline support is partially implemented via IndexedDB
- The main flow is: Home → Business Analysis → Marketing Strategy → Lead Search → Campaign Creation
