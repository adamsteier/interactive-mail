# Interactive Mail Application Overview

This document provides an overview of the Interactive Mail application, explaining the main components and how they work together to create targeted marketing campaigns and postcards.

## Core Application Flow

### 1. Home Page (src/app/page.tsx)

The home page is the main entry point for users and serves as a wizard-like interface that guides users through the process of creating targeted marketing campaigns. The workflow includes:

1. **Location Selection**: The application starts by fetching the user's location data automatically or allowing manual input of a target area.
2. **Business Information Collection**: Users input their business name and other basic information.
3. **Business Analysis**: The application analyzes the business information to determine the industry and provides a description.
4. **Marketing Strategy Generation**: Based on the business analysis, the app generates a tailored marketing strategy.
5. **Leads Collection**: The app searches for potential business leads in the specified target area.
6. **Authentication**: When users try to view their leads, they're prompted to sign in or create an account while data processing continues in the background.

#### Key Components on Home Page:
- `AnimatedBackground`: Provides an interactive background that reacts to user input
- `TypewriterPrompt`: Displays step instructions with a typewriter animation effect
- `InputField`: Captures user input for each step
- `InfoBox`: Displays submitted information in organized info boxes
- `LoadingBar`: Shows loading state while processing data
- `EditModal`: Allows users to edit previously entered information
- `MarketingResults`: Displays the generated marketing strategy and business targets
- `PlacesLeadsCollection`: Shows potential business leads in the target area
- `LocationSelector`: Allows users to select specific locations
- `TechnoConfetti`: Celebratory animation displayed when analysis is complete
- `AuthOverlay`: Displays authentication options when users try to access premium features

#### Marketing Results Component (src/components/MarketingResults.tsx)
The Marketing Results component presents the generated marketing strategy to the user, including:
- Primary recommendation for their business
- Business targets that could be potential customers
- Checkboxes to select which business types to target
- Action buttons to start searching for leads based on selected business types

When the user selects business types and initiates the search:
1. The component updates the search results state in the store
2. Updates the business analysis with the bounding box information
3. Triggers the Google search for businesses in the target area
4. Transitions to showing the leads collection interface

#### Places Leads Collection Component (src/components/PlacesLeadsCollection.tsx)
This component handles the display and management of business leads found in the target area:
- Displays a list of potential leads with business details
- Provides filtering options by business type
- Enables selection of leads (individual, bulk, or shift-select for ranges)
- Shows a summary of selected leads
- Includes actions to export or save leads for follow-up

The component smartly manages lead data by:
- Filtering leads based on business type
- Tracking selected leads with an efficient Set data structure
- Supporting advanced selection patterns (range selection with shift key)
- Displaying progress indicators during the search process

### 2. Postcard Design (src/app/design/page.tsx)

After analyzing the target market, users can create custom postcards for their marketing campaigns.

#### Key Components:
- `PostcardDesigner`: Main component that handles the postcard design process, offering four design methods:
  - Upload existing designs
  - AI-generated designs
  - Work with a human designer
  - AI Design + Expert Review

The AI design flow is managed by `AIDesignWizard` which guides users through several steps:

1. **Design Method Selection**: Choose between single design or multiple segment-based designs
2. **Audience Segmentation**: Identify different audience segments if applicable
3. **Brand Identity**: Enter brand information like colors, style preferences, and logo
4. **Marketing Goals**: Define marketing objectives and call-to-action
5. **Target Audience**: Specify audience demographics and interests
6. **Business Details**: Input business contact information and taglines
7. **Visual Elements**: Select design style, layout, and image preferences
8. **Review & Generate**: Confirm details and generate the postcard design

### 3. Postcard Preview (src/app/postcard_preview/page.tsx)

Users can view all their saved postcard designs, which are stored in Firebase.

#### Key Components:
- `PostcardPreviewPage`: Main component that fetches and displays saved postcard designs
- `DynamicPostcard`: Renders individual postcards using stored code
- `ZoomablePostcard`: Allows users to zoom and examine postcard details

The `DynamicPostcard` component uses an innovative approach to render postcards:
- It loads postcard designs as code strings from Firebase
- Cleans the code by removing unnecessary imports and language identifiers
- Uses JavaScript's Function constructor to evaluate and render the component code
- Provides a fallback display if dynamic rendering fails
- Wraps the generated component with necessary context providers

## Components Overview

### Authentication Components

#### `AuthContext.tsx`
Provides Firebase authentication functionality throughout the application. Features include:
- User state tracking (logged in/out status)
- Email/password sign in and sign up methods
- Google sign-in integration
- Logout functionality
- Authentication state persistence

The authentication system is integrated at the root layout level, making it available app-wide.

#### `AuthOverlay.tsx`
A modal overlay component that appears when users try to access premium features without being authenticated. Features include:
- Tabbed interface for switching between sign-in and sign-up modes
- Email/password authentication
- Google sign-in option
- Form validation with error handling
- Semi-transparent background that allows users to see data loading activity happening behind it
- Strategically placed z-indexing to ensure the overlay remains visible until explicit authentication
- Translucent backdrop (70% opacity) with moderate blur effect that lets users see data being gathered
- Enhanced security that prevents premature dismissal before authentication completes

The overlay is designed to maintain the application flow by allowing data processing to continue in the background while users authenticate. This creates a seamless experience without interrupting the workflow, while also providing visual incentives as leads are loaded in the background.

#### `MarketingResults.tsx`
Displays the generated marketing strategy, business targets, and allows users to select which business types to target. Provides actionable insights and initiates the search for potential leads. Key features include:

- Presentation of marketing strategy recommendations
- Business target selection through interactive checkboxes
- Authentication enforcement while maintaining background processing
- Explicit authentication tracking using the authCompleted state
- Continuous authentication verification to prevent premature overlay dismissal
- Visual progress indicators that remain visible during authentication
- Background loading indicators showing real-time search progress
- Animated placeholder content that hints at the data being gathered
- Layered z-index management (z-30 for background progress, z-50 for auth overlay)

This component intelligently manages the user experience by starting the search process immediately upon user request, while requiring authentication before revealing the complete results. This approach optimizes the perceived performance by parallelizing data fetching and authentication.

### Home Page & Wizard Components

#### `AnimatedBackground.tsx`
Creates a dynamic, interactive background with animated particles that respond to user input. The particles follow cursor movements and create a modern, tech-focused visual effect.

#### `TypewriterPrompt.tsx`
Displays text with a typewriter animation effect, making instructions and prompts appear as if they're being typed in real-time. This component creates an engaging, conversational feel for the user interface.

#### `InputField.tsx`
Handles user input with features like auto-focus, submit on enter, and position reporting. This component tracks the input field's position to allow other elements (like the animated background) to react to it.

#### `InfoBox.tsx`
Displays submitted information in organized boxes with labels and values. Provides different positioning options (first, inline, below) and includes click handlers to allow users to edit the information.

#### `LoadingBar.tsx`
Displays loading states with animated bars that provide visual feedback during processing operations. Customizable with different heights to fit various UI contexts.

#### `EditModal.tsx`
A modal dialog that allows users to edit previously entered information like target area, business name, industry, and description. Includes form validation and save/cancel actions.

#### `LocationSelector.tsx`
Enables users to select specific geographic locations from search results. This component helps refine the target area for marketing campaigns by providing more precise location data.

#### `TechnoConfetti.tsx`
Creates a celebratory confetti animation effect when analysis is complete, adding a delightful touch to the user experience after completing important steps.

### Marketing & Leads Components

#### `MarketingResults.tsx`
Displays the generated marketing strategy, business targets, and allows users to select which business types to target. Provides actionable insights and initiates the search for potential leads.

#### `PlacesLeadsCollection.tsx`
Main interface for displaying, filtering, and selecting business leads found in the target area. Supports advanced selection patterns and displays progress during search operations.

#### `LeadsCollection.tsx`
A specialized component for organizing and displaying collected leads, with options for exporting or saving leads for future marketing efforts.

#### `SelectionSummary.tsx`
Displays a summary of selected leads, including count by business type and total selection. Provides context for user selections and may include action buttons for the selected items.

### Postcard Design Components

#### `PostcardDesigner.tsx`
The entry point for postcard design, offering multiple design methods: upload, AI-generated, or work with a designer.
- **(New)** Includes a fourth option: "AI Design + Expert Review", which uses the `HumanAssistedWizard`.
Contains the main navigation for the design process.

#### `AIDesignWizard.tsx`
A multi-step wizard that guides users through creating AI-generated postcard designs. Manages the state and flow between different design steps.

#### `AudienceSegmentation.tsx`
Helps users identify and define different audience segments for targeted postcard designs. Used when creating segment-specific designs for different customer groups.

#### `BrandIdentity.tsx`
Collects brand information like name, colors, logo, and style preferences. This data is used to ensure the postcard design aligns with the brand's visual identity.

#### `MarketingGoals.tsx`
Collects marketing objectives and call-to-action, influencing postcard design and messaging.

#### `TargetAudience.tsx`
Collects target audience details to tailor postcard design.

#### `HumanAssistedWizard.tsx` (New Component / Refined Flow)
A multi-step wizard specifically for the "AI Design + Expert Review" flow.
- **Detects Scope:** Checks if user selected leads from single or multiple business types.
- **(Conditional) Design Scope Choice:** If multiple types, prompts user to choose between one design for all types or separate designs per type.
- **Global Brand Identity:** Guides user through defining brand name, colors, style preferences, etc., *once*, applying globally to all designs in the request.
- **Logo Upload:** Includes a dedicated step for logo upload (optional), saved globally for the request.
- **Campaign-Specific Data Collection:** Guides user through Marketing Goals, Target Audience, Business Details, and Visual Elements steps. If multiple designs were chosen, user can switch between business types to enter specific details for each.
- **Progressive Saving (Multi-Design):**
    - Creates Firestore document (`design_requests/{id}`) immediately with `status: 'draft_multiple'`.
    - Calls backend (`/api/generate-design-prompt`) for an initial admin notification.
    - Saves user input for each campaign step (Marketing, Audience, etc.) to the Firestore document progressively via `updateDoc`.
- **Final Submission (`handleSubmitRequest`):**
    - **Single Design:** Creates Firestore document, sets status to `pending_prompt`, calls `/api/generate-design-prompt` API.
    - **Multi-Design:** Updates existing Firestore document status to `pending_prompt`, saves final state of all campaigns, calls `/api/generate-design-prompt` API.
- **Backend API Interaction (`/api/generate-design-prompt`):**
    - **On `draft_multiple` status:** Sends only an initial admin notification via SendGrid.
    - **On `pending_prompt` status:** Fetches full data, calls OpenAI for AI prompt/summary (based on first campaign as starting point), updates Firestore with AI results and status `pending_review`, sends detailed admin notification.
- **UI Feedback:** Shows processing/waiting state after final submission while backend processing occurs.

#### `BusinessDetails.tsx`
Gathers business contact info, tagline, etc.

#### `VisualElements.tsx`
Enables selection of design style, layout, and image preferences for the postcard. Controls the visual aspects of the postcard design. Specifically, users can choose:
- Image styles (photograph, illustration, abstract, minimal)
- Image sources (AI-generated, stock photos, custom uploads)
- Primary image subject
- Layout styles (clean, bold, elegant, playful)
- Color scheme preferences, with automatic suggestions based on brand colors

#### `ReviewGenerate.tsx`
Provides a summary of all selected design options and initiates the postcard generation process. Allows users to review their choices before final generation.

#### `PostcardGeneration.tsx`
Handles the actual generation of the postcard design based on all selected options and gathered information. Processes the design request and communicates with backend services.

#### `DynamicPostcardDesign.tsx`
Creates dynamic, code-based postcard designs that can be rendered on demand. Works with the design data to generate React components for postcard rendering.

#### `PostcardDesigns.tsx`
Manages a collection of postcard design templates or previously created designs. May provide selection and preview capabilities.

#### `PostcardPreview.tsx`
Displays a preview of the postcard design before finalization. Allows users to see how their postcard will look when printed.

#### `ZoomablePostcard.tsx`
Provides zoom and pan functionality for examining postcard details. Enhances the viewing experience for complex designs.

#### `ZoomDocumentation.tsx`
Provides instructions or guidance on how to use the zoom functionality for examining postcards in detail.

### UI Components & Utilities

#### `DesignGuideModal.tsx`
Displays guidelines and specifications for postcard design, particularly useful when users are uploading their own designs.

#### `ProcessingModal.tsx`
Shows a modal with loading indicators and status messages during long-running operations like postcard generation.

#### `LucideIconProvider.tsx`
Provides a context for using Lucide icons throughout the application, ensuring consistent icon rendering.

#### `LucideIconProcessor.tsx`
Processes and transforms icon references in dynamically generated code, ensuring icons render correctly in dynamic components.

## State Management

The application uses Zustand for state management through `useMarketingStore` (src/store/marketingStore.ts). The store manages:

1. **Step Tracking**: Keeps track of current step and completed steps
2. **Location Data**: Stores city, region, and country information
3. **Business Information**: Manages target area, business name, and business analysis data
4. **Marketing Strategy**: Stores the generated marketing strategy
5. **Lead Collection**: Manages selected business types and collected leads
6. **Search Results**: Stores places data and search progress
7. **UI State**: Manages UI-related state like input position, loading states, etc.

The store also contains key actions like:
- `handleSubmit`: Processes user input at each step
- `fetchMarketingStrategy`: Generates a marketing strategy based on business analysis
- `handleGoogleSearch`: Searches for leads in the target area using a hexagonal grid approach for optimal coverage
- `setSelectedBusinessTypes`: Manages the selection of business types for targeting

## Technical Components

### Data Processing
- **Hexagonal Grid Generation**: Creates a grid of search points to efficiently cover the target area
  - Calculates optimal grid density based on area size
  - Uses hexagonal packing for more efficient coverage than square grids
  - Adjusts search radius for each point based on area characteristics
- **Duplicate Handling**: Prevents duplicate leads in search results

### Dynamic Rendering
- **Dynamic Postcard Rendering**: Uses Function constructor to evaluate and render postcard components from stored code
- **Fallback System**: Provides fallback rendering when dynamic rendering fails

### External Integrations
- **Firebase Authentication**: Handles user authentication and session management
- **Firebase/Firestore**: Stores and retrieves postcard designs and user data
- **Google Places API**: Used for lead generation and location data

## User Experience Flow

1. User starts at the home page and enters their target area
2. User enters their business name
3. The system analyzes the business and generates a marketing strategy
4. User reviews the strategy and selects which business types to target
5. When the user clicks "Looks good, now show me my leads", the authentication overlay appears if the user is not logged in
6. The system continues processing data in the background while the user signs in or creates an account
7. Once authenticated, the overlay closes and the user can see their leads
8. The system searches for leads matching the selected business types in the target area
9. User can select leads of interest and export or save them for future marketing efforts
10. User can navigate to the campaign build flow by clicking "Start Campaign":
    - The client generates a unique campaign ID (`cid`)
    - The system collects all found leads and selected place_ids
    - The client calls the `createCampaignWithLeads` Cloud Function with the campaign data
    - Upon success, user is redirected to `/build/{cid}`
11. In the Campaign Build page (`/build/[campaignId]`), the system:
    - Fetches campaign data based on the URL parameter
    - Displays leads data and allows further refinement
    - Detects `campaignMode` ("one_off" or "autopilot") and adapts UI accordingly
12. User proceeds to postcard design:
    - For "one_off" mode: User creates a single postcard design
    - For "autopilot" mode: User can set up a recurring campaign with design reuse options
    - User can choose from three design methods:
        - **Upload Own Design:** Upload a pre-designed postcard image
            - Specifications: 4×6 inches (152.4mm × 101.6mm + 3mm bleed margins)
            - Required resolution: 1871 × 1271 pixels at 300 DPI
            - System validates dimensions and resolution
            - Template overlay option to ensure proper placement of text/elements
        - **AI-Generated Design:** Use the AI Design Wizard
            - **Basic Mode:** Quick design generation with minimal input
                - Business goals (awareness, sales, etc.)
                - Simple brand information (name, colors)
                - Target audience selection
                - Basic copy preferences
            - **Advanced Mode:** Detailed customization options
                - Comprehensive brand identity (colors, style preferences, logo)
                - Detailed marketing goals and messaging
                - Custom copy creation or user-provided copy
                - Image style preferences and subject matter
                - Layout preferences and visual element placement
            - The system generates a prompt combining all inputs
            - Calls AI image generation service via Cloud Function
            - Renders multiple design options for user selection
            - Design can be saved to the `campaigns/{cid}/designs/` subcollection
            - For "autopilot" mode: Design can be locked for reuse (`designIdLocked` field)
        - **Human Designer Service:** Professional design service
            - $50 additional fee
            - Customer completes a simpler design brief
            - System creates a `designRequests/{requestId}` document
            - Sends notification to human designer via SendGrid
            - Designer receives brief and creates design
            - Designer uploads final design through admin interface
            - Customer receives notification when design is ready
            - Design is automatically added to campaign
13. Once design is complete, user proceeds to approval:
    - System calculates pricing based on selected leads and product type
    - User can request a quote via the `quoteAndCreatePaymentIntent` Cloud Function
14. After approval, user proceeds to checkout:
    - For "one_off" mode: One-time payment for the campaign
    - For "autopilot" mode: Payment model based on subscription or pay-per-drop
15. After payment, for "one_off" mode:
    - User can schedule the campaign via the `scheduleCampaign` Cloud Function
    - System connects to Stannp API to send postcards to selected leads
16. For "autopilot" mode:
    - Initial setup is saved with `nextRunAt` and `recurrence` settings
    - The system's Cron-triggered Cloud Function will periodically:
      - Check for due campaigns
      - Scrape new data from configured sources
      - Deduplicate against existing leads
      - Send postcards to new leads
      - Update campaign with next run date
17. User can track all campaigns in the Customer Console (`/console`):
    - View list of campaigns with status, mode, and metrics
    - Filter by status, mode, and other parameters
    - For autopilot campaigns: view upcoming schedule and past performance
18. Staff can access the Admin Console (`/admin`) to:
    - View all user campaigns
    - Impersonate users when needed
    - Manage campaign details and statuses
    - Force-send or cancel campaigns
    - View detailed logs and analytics

## Database Implementation Plan

This section outlines the Firestore schema implementation for our campaign management system, supporting both one-off and autopilot campaigns.

### Database Structure

#### 1. Campaigns Collection
```
campaigns/
  ├─ {cid}/ (Client-generated campaign ID)
  │  ├─ ownerUid: string            // User who created the campaign
  │  ├─ strategyId: string | null   // Marketing strategy reference
  │  ├─ campaignMode: "one_off" | "autopilot"
  │  ├─ status: "draft" | "approved" | "processing" | "completed" | "error"
  │  ├─ productType: "postcard_4x6"
  │  ├─ quantity: number            // Number of selected leads
  │  ├─ price: {
  │  │  ├─ tierApplied: string | null
  │  │  ├─ unitCost: number | null
  │  │  ├─ total: number | null
  │  │  └─ currency: "CAD"
  │  ├─ recurrence: string | null   // RRULE string for autopilot
  │  ├─ nextRunAt: timestamp | null // Next run date for autopilot
  │  ├─ designIdLocked: string | null // For autopilot design reuse
  │  ├─ createdAt: timestamp
  │  ├─ updatedAt: timestamp
  │  ├─ teamId: string | null
  │  └─ typeStats: {                // Denormalized counters by business type
  │     ├─ [businessType]: {
  │     │  ├─ found: number
  │     │  ├─ selected: number
  │     │  └─ sent: number
  │     └─ ...
```

#### 2. Leads Subcollection
```
campaigns/{cid}/leads/
  ├─ {leadId}/
  │  ├─ status: "found" | "selected" | "autopilot_found" | "autopilot_selected"
  │  ├─ businessType: string
  │  ├─ createdAt: timestamp
  │  ├─ selectedAt: timestamp | null
  │  ├─ place_id: string          // Google Maps place ID
  │  ├─ name: string              // Business name
  │  ├─ vicinity: string          // Address
  │  └─ ... (other trimmed business data fields)
```

#### 3. Designs Subcollection
```
campaigns/{cid}/designs/
  ├─ {designId}/
  │  ├─ createdAt: timestamp
  │  ├─ updatedAt: timestamp
  │  ├─ designType: "ai" | "upload" | "human"
  │  ├─ status: "draft" | "final"
  │  ├─ imageUrl: string
  │  ├─ thumbnailUrl: string
  │  └─ designData: {
  │     ├─ width: number        // Width in pixels
  │     ├─ height: number       // Height in pixels
  │     ├─ dpi: number          // Resolution (typically 300)
  │     ├─ prompt: string       // For AI-generated designs
  │     ├─ brandColors: string[]// Color codes used
  │     ├─ style: string        // Design style description
  │     ├─ copyText: string     // Text content on the design
  │     └─ metadata: { ... }    // Additional design-specific data
  │  }
```

#### 4. Design Requests Collection (For Human Designer Service)
```
designRequests/
  ├─ {requestId}/
  │  ├─ campaignId: string      // Reference to campaign
  │  ├─ userId: string          // User who requested the design
  │  ├─ createdAt: timestamp
  │  ├─ updatedAt: timestamp
  │  ├─ status: "pending" | "in_progress" | "completed" | "rejected"
  │  ├─ price: number           // Typically $50
  │  ├─ paymentStatus: "pending" | "paid"
  │  ├─ designBrief: {
  │  │  ├─ goals: string
  │  │  ├─ targetAudience: string
  │  │  ├─ brandInfo: { ... }
  │  │  ├─ copyText: string
  │  │  └─ preferences: { ... }
  │  ├─ designerNotes: string   // Notes from the designer
  │  ├─ designerId: string      // Assigned designer (if any)
  │  └─ finalDesignId: string   // Reference to final design in campaign
```

### Firestore Indexes
- `campaigns`: `(ownerUid, campaignMode, createdAt)`
- `campaigns`: `(ownerUid, status, createdAt)`
- `campaigns`: `(ownerUid, createdAt DESC)` // For console pagination
- `leads` (collection group): `(businessType, status)`
- `campaigns`: `(campaignMode ASC, nextRunAt ASC)` // Critical for Autopilot Cron

### Implementation Steps

#### Phase 1: Core Campaign Structure
- [x] 1. Create Firebase service module for Campaigns
- [x] 2. Implement client-side campaign ID generation (using `ulid()`)
- [x] 3. Create the `createCampaignWithLeads` Cloud Function
- [x] 4. Implement batch processing for leads
- [x] 5. Develop type-safe Firestore converters

#### Phase 2: Campaign Build Interface
- [ ] 6. Create the campaign build page with dynamic routing
- [ ] 7. Implement campaign data fetching with real-time updates
- [ ] 8. Develop lead management components for the build interface
- [ ] 9. Create campaign mode detection and conditional UI

#### Phase 3: One-Off Campaign Flow
- [ ] 10. Implement postcard design interface
   - [ ] 10.1. Create image upload component with validation for 4×6 (1871×1271px) specs
   - [ ] 10.2. Implement AI Design Wizard with Basic and Advanced modes
   - [ ] 10.3. Develop Human Designer Service request flow
   - [ ] 10.4. Create AI prompt generation service
   - [ ] 10.5. Implement Cloud Function for AI image generation
   - [ ] 10.6. Create SendGrid integration for designer notifications
- [ ] 11. Develop quote and payment intent creation
- [ ] 12. Implement checkout flow
- [ ] 13. Create scheduling interface and API
- [ ] 14. Implement Stannp API integration for postcard sending

#### Phase 4: Autopilot Campaign Flow
- [ ] 15. Develop autopilot configuration interface
- [ ] 16. Implement recurrence settings with RRULE
- [ ] 17. Create Cron-triggered Cloud Function
- [ ] 18. Develop data scraping mechanisms
- [ ] 19. Implement deduplication and mailing automation

#### Phase 5: Console Interface
- [ ] 20. Develop customer console for campaign management
- [ ] 21. Implement filtering and pagination
- [ ] 22. Create detailed campaign analytics views
- [ ] 23. Develop campaign status monitoring

#### Phase 6: Admin Interface
- [ ] 24. Implement admin console with all campaigns view
- [ ] 25. Create user impersonation functionality
- [ ] 26. Develop campaign management controls
- [ ] 27. Create detailed logging and analytics dashboard

#### Phase 7: Security & Optimization
- [ ] 28. Implement comprehensive Firestore security rules
- [ ] 29. Add App Check integration
- [ ] 30. Optimize queries and indexing
- [ ] 31. Add background cleanup processes
- [ ] 32. Implement rate limiting and quotas

This implementation plan focuses on a more streamlined Firestore structure centered around campaigns as the primary entity, with leads and designs as subcollections. The approach supports both one-off and recurring autopilot campaigns, with clear separation of concerns in the codebase.

## Application Structure

### Routing Architecture

The application uses Next.js 15 route groups for organization, with the following structure:

```
src/app/
  ├─ (campaignBuild)/
  │  ├─ build/
  │  │  ├─ [campaignId]/
  │  │  │  ├─ page.tsx           // Build/Design Page (shared by modes)
  ├─ (console)/
  │  ├─ console/
  │  │  ├─ page.tsx              // Customer Console
  │  ├─ (admin)/
  │  │  ├─ admin/
  │  │  │  ├─ page.tsx              // Staff-only Admin Console
```

### Feature-First Organization

Components, hooks, and non-page logic are organized within feature directories:

```
src/features/
  ├─ campaignBuild/
  │  ├─ components/
  │  │  ├─ LeadSelector.tsx
  │  │  ├─ DesignWizard.tsx
  │  │  ├─ DesignUploader.tsx
  │  │  ├─ HumanDesignRequest.tsx
  │  │  ├─ CampaignApproval.tsx
  │  ├─ hooks/
  │  │  ├─ useCampaignData.tsx
  │  │  ├─ useDesignGeneration.tsx
  ├─ console/
  │  ├─ components/
  │  │  ├─ CampaignList.tsx
  │  │  ├─ CampaignCard.tsx
  │  │  ├─ CampaignDetails.tsx
  │  │  ├─ FilterControls.tsx
  │  ├─ hooks/
  │  │  ├─ useCampaignList.tsx
  │  │  ├─ useCampaignFilters.tsx
  ├─ admin/
  │  ├─ components/
  │  │  ├─ UserList.tsx
  │  │  ├─ AllCampaigns.tsx
  │  │  ├─ ImpersonationControls.tsx
  │  │  ├─ DesignRequestHandler.tsx
  │  ├─ hooks/
  │  │  ├─ useAdminData.tsx
```

### Services & Utilities

Shared services and utilities are organized in dedicated directories:

```
src/services/
  ├─ campaignService.ts          // Client-side service for campaigns
  ├─ designService.ts            // Design generation and management
  ├─ leadService.ts              // Lead management functions
  
src/store/
  ├─ useCampaignFlowStore.ts     // State for build and console

src/types/
  ├─ campaign.ts                 // Campaign, CampaignLead, CampaignMode types
  ├─ autopilot.ts                // AutopilotConfig type
  ├─ firestoreConverters.ts      // Typed Firestore converters

src/lib/
  ├─ chunkArray.ts               // Utility for batch processing
```

This feature-first directory structure enables clear separation of concerns, improves code maintainability, and facilitates team collaboration by organizing related components and logic together rather than by technical role.
